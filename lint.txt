cmd/cli/main.go:63:2: singleCaseSwitch: should rewrite switch statement to if statement (gocritic)
cmd/cli/main.go:96:26: Error return value of `todoService.GetUserTodos` is not checked (errcheck)
cmd/cli/main.go:104:25: Error return value of `todoService.UpdateTitle` is not checked (errcheck)
cmd/cli/main.go:106:22: Error return value of `todoService.DoneTodo` is not checked (errcheck)
cmd/web/main.go:11:14: `initLog` - `format` is unused (unparam)
internal/configs/configs.go:19:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:19:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:20:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:20:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:21:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:21:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:22:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:22:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:23:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:23:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:24:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:24:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:26:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:26:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:27:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:27:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:29:2: ST1003: should not use ALL_CAPS in Go names; use CamelCase instead (stylecheck)
internal/configs/configs.go:29:2: var-naming: don't use ALL_CAPS in Go names; use CamelCase (revive)
internal/configs/configs.go:69:4: whyNoLint: include an explanation for nolint directive (gocritic)
internal/helpers/helpers.go:29:6: ST1003: func Uuid should be UUID (stylecheck)
internal/helpers/helpers.go:29:6: var-naming: func Uuid should be UUID (revive)
internal/log/structs.go:23:15: var-naming: method ToJson should be ToJSON (revive)
internal/log/structs.go:23:15: ST1003: method ToJson should be ToJSON (stylecheck)
internal/todo/dto.go:5:6: exported: type name will be used as todo.TodoDto by other packages, and that stutters; consider calling this Dto (revive)
internal/todo/repository.go:19:6: exported: type name will be used as todo.TodoRepository by other packages, and that stutters; consider calling this Repository (revive)
internal/todo/repository.go:31:29: var-naming: method FetchByUuid should be FetchByUUID (revive)
internal/todo/repository.go:31:29: ST1003: method FetchByUuid should be FetchByUUID (stylecheck)
internal/todo/repository.go:37:15: Error return value of `statement.ToSql` is not checked (errcheck)
internal/todo/repository.go:54:5: sloppyReassign: re-assignment to `err` can be replaced with `err := rows.Err()` (gocritic)
internal/todo/repository.go:76:15: Error return value of `statement.ToSql` is not checked (errcheck)
internal/todo/repository.go:132:15: Error return value of `statement.ToSql` is not checked (errcheck)
internal/todo/repository.go:150:5: sloppyReassign: re-assignment to `err` can be replaced with `err := rows.Err()` (gocritic)
internal/todo/structs.go:8:2: ST1003: struct field OwnerUuid should be OwnerUUID (stylecheck)
internal/todo/structs.go:8:2: var-naming: struct field OwnerUuid should be OwnerUUID (revive)
internal/todo/structs.go:25:6: exported: type name will be used as todo.TodoFilter by other packages, and that stutters; consider calling this Filter (revive)
internal/todo/structs.go:27:2: ST1003: struct field OwnerUuid should be OwnerUUID (stylecheck)
internal/todo/structs.go:27:2: var-naming: struct field OwnerUuid should be OwnerUUID (revive)
internal/todo/structs.go:29:2: ST1003: struct field Uuid should be UUID (stylecheck)
internal/todo/structs.go:29:2: var-naming: struct field Uuid should be UUID (revive)
internal/todo/structs_test.go:14:3: ST1003: struct field OwnerUuid should be OwnerUUID (stylecheck)
internal/todo/structs_test.go:14:3: var-naming: struct field OwnerUuid should be OwnerUUID (revive)
internal/todo/todo.go:9:6: exported: type name will be used as todo.TodoService by other packages, and that stutters; consider calling this Service (revive)
internal/todo/todo.go:25:15: ST1003: interface method parameter ownerUuid should be ownerUUID (stylecheck)
internal/todo/todo.go:25:15: var-naming: interface method parameter ownerUuid should be ownerUUID (revive)
internal/todo/todo.go:30:30: var-naming: interface method parameter ownerUuid should be ownerUUID (revive)
internal/todo/todo.go:30:30: ST1003: interface method parameter ownerUuid should be ownerUUID (stylecheck)
internal/todo/todo.go:41:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/todo/todo.go:41:36: ST1003: method parameter ownerUuid should be ownerUUID (stylecheck)
internal/todo/todo.go:41:36: var-naming: method parameter ownerUuid should be ownerUUID (revive)
internal/todo/todo.go:61:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/todo/todo.go:61:23: var-naming: method FetchByUuid should be FetchByUUID (revive)
internal/todo/todo.go:61:23: ST1003: method FetchByUuid should be FetchByUUID (stylecheck)
internal/todo/todo.go:67:1: paramTypeCombine: func(uuid string, ownerUuid string) (bool, error) could be replaced with func(uuid, ownerUuid string) (bool, error) (gocritic)
internal/todo/todo.go:67:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/todo/todo.go:67:23: ST1016: methods on the same type should have the same receiver name (seen 1x "ts", 6x "t") (stylecheck)
internal/todo/todo.go:67:51: var-naming: method parameter ownerUuid should be ownerUUID (revive)
internal/todo/todo.go:67:51: ST1003: method parameter ownerUuid should be ownerUUID (stylecheck)
internal/todo/todo.go:69:2: var-naming: var cachedOwnerUuid should be cachedOwnerUUID (revive)
internal/todo/todo.go:69:2: ST1003: var cachedOwnerUuid should be cachedOwnerUUID (stylecheck)
internal/todo/todo.go:99:1: paramTypeCombine: func(uuid string, title string) error could be replaced with func(uuid, title string) error (gocritic)
internal/todo/todo.go:99:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/todo/todo.go:114:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/todo/todo.go:134:1: receiver-naming: receiver name t should be consistent with previous receiver name ts for TodoService (revive)
internal/web/dto.go:10:1: paramTypeCombine: func[T any](items []T, from int, to int) *CollectionDto[T] could be replaced with func[T any](items []T, from, to int) *CollectionDto[T] (gocritic)
internal/web/middleware.go:32:4: ineffectual assignment to reqSize (ineffassign)
internal/web/middleware.go:35:25: Error return value of `w.LogService.InsertLog` is not checked (errcheck)
internal/web/routers-todos.go:30:3: ST1003: struct field Uuid should be UUID (stylecheck)
internal/web/routers-todos.go:30:3: var-naming: struct field Uuid should be UUID (revive)
internal/web/routers-todos.go:33:2: ST1003: var userId should be userID (stylecheck)
internal/web/routers-todos.go:33:2: var-naming: var userId should be userID (revive)
internal/web/routers-todos.go:84:2: ST1003: var userId should be userID (stylecheck)
internal/web/routers-todos.go:84:2: var-naming: var userId should be userID (revive)
internal/web/routers-todos.go:84:12: Error return value is not checked (errcheck)
internal/web/routers-todos.go:112:3: var-naming: struct field Uuid should be UUID (revive)
internal/web/routers-todos.go:112:3: ST1003: struct field Uuid should be UUID (stylecheck)
internal/web/routers-todos.go:117:2: var-naming: var userId should be userID (revive)
internal/web/routers-todos.go:117:2: ST1003: var userId should be userID (stylecheck)
internal/web/routers-todos.go:117:12: Error return value is not checked (errcheck)
internal/web/routers-todos.go:118:13: Error return value is not checked (errcheck)
internal/web/routers-todos_test.go:27:2: var-naming: var userUuid should be userUUID (revive)
internal/web/routers-todos_test.go:27:2: ST1003: var userUuid should be userUUID (stylecheck)
internal/web/routers-todos_test.go:42:18: Error return value of `json.Unmarshal` is not checked (errcheck)
internal/web/routers-todos_test.go:69:18: Error return value of `json.Unmarshal` is not checked (errcheck)
internal/web/structs.go:11:2: var-naming: struct field Uuid should be UUID (revive)
internal/web/structs.go:11:2: ST1003: struct field Uuid should be UUID (stylecheck)
internal/web/structs.go:15:2: ST1003: struct field Uuid should be UUID (stylecheck)
internal/web/structs.go:15:2: var-naming: struct field Uuid should be UUID (revive)
internal/web/web.go:40:7: Error return value of `postgres.NewPDB` is not checked (errcheck)
internal/web/web.go:139:71: comparing with != will fail on wrapped errors. Use errors.Is to check for a specific error (errorlint)
pkg/postgres/postgres.go:7:2: blank-imports: a blank import should be only in a main or test package, or have a comment justifying it (revive)
